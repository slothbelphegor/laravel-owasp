<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Models\User;

class VulnerabilityController extends Controller
{
    // 1. SQL Injection Vulnerability
    public function sqlInjection(Request $request)
    {
        $id = $request->input('id');
        $users = DB::select("SELECT * FROM users WHERE id = $id"); // Vulnerable
        // $users = DB::select("SELECT * FROM users WHERE id = ?", [$id]); // Safe
        return view('vulnerabilities.sql_injection', compact('users'));
    }

    // 2. Cross-Site Scripting (XSS)
    public function xss(Request $request)
    {
        $name = $request->input('name');
        session(['name' => $name]); // Vulnerable, as it stores unescaped input
        return redirect()->route('xss.form');
    }

    // 3. CSRF Vulnerability
    public function csrf(Request $request)
    {
        // This method accepts POST requests and does not validate CSRF token.
        // In a real application, you should use CSRF protection.

        $name = $request->input('name');

        // Simulate creating a user or storing a name
        session(['name' => $name]); // Store the name in the session
        return redirect()->route('csrf.form')->with('message', 'User created: ' . $name);
    }

    // 4. Broken Access Control (IDOR)
    public function idor(Request $request)
    {
        $id = $request->input('id'); // Get the user ID from the request
        $user = User::find($id); // Retrieve the user without authorization checks

        return view('vulnerabilities.idor', compact('user'));
    }

    // 5. Remote Code Execution (RCE)
    public function rce(Request $request)
    {
        // Fetch the code input from the form
        $code = $request->input('code');

        // Initialize an output buffer to capture the result of the eval() execution
        ob_start();
        eval($code); // Vulnerable
        $result = ob_get_clean(); // Get the output from eval() execution

        // Store the result in session to display it on the view
        return redirect()->back()->with('message', 'Code executed!')->with('result', $result);
    }
}
